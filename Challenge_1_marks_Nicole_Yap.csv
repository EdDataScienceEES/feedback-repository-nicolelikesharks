"Challenge","Student_number","Last","First","GitHub_username","Challenge_mark","Challenge_feedback","Creativity_mark","Creativity_feedback","Reproducibility_mark","Reproducibility_feedback","Participation_mark","Participation_feedback","Overall_mark","Name"
"Challenge1_data_wrangling","s1761850/1","Yap","Nicole","nicolelikesharks",58,"Great that you caught things like filter for aves to be redundant and instead filter directly for Canada Goose. You could have reduced the number of redundant packages loaded as you used loaded the tidyverse, which already contains dplyr, tidyr, and ggplot2. Overall all you could have used more tidyverse functions and pipes when wrangling LPI_long to streamline your code. In a pipe you can also nest individual processes under a single function, ie write mutate once and then have one line for each column being mutates, with each line being separated by a comma (as done in the efficient data wrangling tutorial). You could have filtered year for >15 duration once in the pipe (e.g., where you currently filter for >5 years duration) and then you don't have redundant filtering of the same variable.",58,"Using some more tidyverse functions would have made your code more efficient and help to display some creativity. It would have especially been nice to see some additional tidy verse functions, that where not introduced in to coding club tutorials. Going through each line of the code and thinking about what it was doing and whether that was a useful thing to do, would have also helped you catch redundancies like only filtering for geese at the end of your wrangling or filtering for year twice.",58,"You had informative annotations throughout your script with code chucks prefaced with relevant comments and additional inline comments when needed. Sometimes your comments before function ie when creating LPI_long_final where lengthy and could have been streamlined by using more inline code. One addition for your future scripts could be to break your code into section by add four dashes (----) after main working steps like loading packages, data, etc. Your repo was well organized with consistent naming conventions. You could have added some background information, contact details etc in your README.md beyond “this is the repo for challenge one”, but the navigation section with linked to your individual folders was a helpful addition. Also its always helpful to have a basic readme right from the beginning of creating a repo so that your collaborators know what is what, rather than adding one at the end. You saved all your figures using code. One thing to keep in mind is that it is conventional to keep the code for saving figures right below the code used to plot them, to make it easier to resave figures and keep track of which saving code belongs to which figure.",55,"Good job at giving inline comments to your assigned peer. It would have been helpful to give future feedback though a pull request to make clearer what feedback you provided and ease the discussion and integration of comments. You could have engaged more with the feedback you received by for example outlining how you went about addressing your feedback. Additionally, some stating some issues could been a helpful way to facilitate some feedback and interaction with your repo. It would have been beneficial to share your favourite wrangling function earlier, so that your peers would have more time to engage with your comment. I like that you specified the mutate_if() function as multiple other students also mentioned the normal mutate function but, it would have been nice to see you use this creatively your own code",57,"Nicole_Yap"
